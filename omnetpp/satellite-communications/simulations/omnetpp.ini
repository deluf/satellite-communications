
[General]
network = SatCom
sim-time-limit = 80s
num-rngs = 2 * ${terminalCount}

SatCom.terminalCount = ${terminalCount = 3}
SatCom.communicationSlotDuration = 80 ms

# We split the 2 * terminalCount physical RNGs in the following way: 
#
SatCom.groundStation.packetGenerator[*].rng-0 = 2 * ancestorIndex(0)
SatCom.terminal[*].rng-0 = 2 * ancestorIndex(0) + 1
# i.e.
# *.groundStation.packetGenerator[0].rng-0 = 0
# *.terminal[0].rng-0 = 1
# *.groundStation.packetGenerator[1].rng-0 = 2
# *.terminal[1].rng-0 = 3
# ...
# *.groundStation.packetGenerator[terminalCount - 1].rng-0 = 2 * terminalCount - 2
# *.terminal[terminalCount - 1].rng-0 = 2 * terminalCount - 1
#
# We need 2 * terminalCount independent streams of random numbers because:
#  1. Each terminal must have its stream of coding rates, independent from the other terminals
#  2. Each terminal must have its stream of packet arrival times and packet sizes
# 	Note that the last two factors are independent "by design", hence 
# 	 we only need another terminalCount independent streams (and not 2 * terminalCount)	
# 	This is because, whatever the distributions, a packetGenerator always extracts:
#	 one size, one arrival time, one size, one arrival time, ... 

# The distribution of the coding rates can be one of the following:
# - "uniform"
# - "binomial"
# - "normal"
SatCom.terminal[*].codingRateDistribution = "uniform"

SatCom.groundStation.packetScheduler.blocksPerFrame = 3
SatCom.groundStation.packetGenerator[*].minPacketSize = 40 byte
SatCom.groundStation.packetGenerator[*].maxPacketSize = 400 byte
SatCom.groundStation.packetGenerator[*].meanPacketInterarrivalTime = 40 ms
