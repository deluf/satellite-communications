//
// Generated file, do not edit! Created by opp_msgtool 6.0 from codingRateMessage.msg.
//

#ifndef __CODINGRATEMESSAGE_M_H
#define __CODINGRATEMESSAGE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class CodingRateMessage;
/**
 * Enum generated from <tt>codingRateMessage.msg:3</tt> by opp_msgtool.
 * <pre>
 * enum CODING_RATE
 * {
 *     L3 = 0;
 *     L2 = 1;
 *     L1 = 2;
 *     R = 3;
 *     H1 = 4;
 *     H2 = 5;
 *     H3 = 6;
 * }
 * </pre>
 */
enum CODING_RATE {
    L3 = 0,
    L2 = 1,
    L1 = 2,
    R = 3,
    H1 = 4,
    H2 = 5,
    H3 = 6
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const CODING_RATE& e) { b->pack(static_cast<int>(e)); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, CODING_RATE& e) { int n; b->unpack(n); e = static_cast<CODING_RATE>(n); }

/**
 * Class generated from <tt>codingRateMessage.msg:14</tt> by opp_msgtool.
 * <pre>
 * message CodingRateMessage
 * {
 *     int terminalId;
 *     CODING_RATE codingRate;
 * }
 * </pre>
 */
class CodingRateMessage : public ::omnetpp::cMessage
{
  protected:
    int terminalId = 0;
    CODING_RATE codingRate = static_cast<CODING_RATE>(-1);

  private:
    void copy(const CodingRateMessage& other);

  protected:
    bool operator==(const CodingRateMessage&) = delete;

  public:
    CodingRateMessage(const char *name=nullptr, short kind=0);
    CodingRateMessage(const CodingRateMessage& other);
    virtual ~CodingRateMessage();
    CodingRateMessage& operator=(const CodingRateMessage& other);
    virtual CodingRateMessage *dup() const override {return new CodingRateMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getTerminalId() const;
    virtual void setTerminalId(int terminalId);

    virtual CODING_RATE getCodingRate() const;
    virtual void setCodingRate(CODING_RATE codingRate);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const CodingRateMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, CodingRateMessage& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline CodingRateMessage *fromAnyPtr(any_ptr ptr) { return check_and_cast<CodingRateMessage*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __CODINGRATEMESSAGE_M_H

