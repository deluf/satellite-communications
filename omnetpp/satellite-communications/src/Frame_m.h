//
// Generated file, do not edit! Created by opp_msgtool 6.0 from Frame.msg.
//

#ifndef __FRAME_M_H
#define __FRAME_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class Frame;
#include "Block_m.h" // import Block

/**
 * Class generated from <tt>Frame.msg:4</tt> by opp_msgtool.
 * <pre>
 * message Frame
 * {
 *     int size;
 *     Block blocks[];
 * }
 * </pre>
 */
class Frame : public ::omnetpp::cMessage
{
  protected:
    int size = 0;
    Block *blocks = nullptr;
    size_t blocks_arraysize = 0;

  private:
    void copy(const Frame& other);

  protected:
    bool operator==(const Frame&) = delete;

  public:
    Frame(const char *name=nullptr, short kind=0);
    Frame(const Frame& other);
    virtual ~Frame();
    Frame& operator=(const Frame& other);
    virtual Frame *dup() const override {return new Frame(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getSize() const;
    virtual void setSize(int size);

    virtual void setBlocksArraySize(size_t size);
    virtual size_t getBlocksArraySize() const;
    virtual const Block& getBlocks(size_t k) const;
    virtual Block& getBlocksForUpdate(size_t k) { return const_cast<Block&>(const_cast<Frame*>(this)->getBlocks(k));}
    virtual void setBlocks(size_t k, const Block& blocks);
    virtual void insertBlocks(size_t k, const Block& blocks);
    [[deprecated]] void insertBlocks(const Block& blocks) {appendBlocks(blocks);}
    virtual void appendBlocks(const Block& blocks);
    virtual void eraseBlocks(size_t k);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Frame& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Frame& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline Frame *fromAnyPtr(any_ptr ptr) { return check_and_cast<Frame*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __FRAME_M_H

