//
// Generated file, do not edit! Created by opp_msgtool 6.0 from Block.msg.
//

#ifndef __BLOCK_M_H
#define __BLOCK_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class Block;
#include "TerminalPacket_m.h" // import TerminalPacket

#include "CodingRateMessage_m.h" // import CodingRateMessage

/**
 * Class generated from <tt>Block.msg:5</tt> by opp_msgtool.
 * <pre>
 * message Block
 * {
 *     CODING_RATE codingRate;
 *     int maxSize;
 *     int usedSize;
 *     TerminalPacket packets[]; // Dynamic array of TerminalPacket
 * }
 * </pre>
 */
class Block : public ::omnetpp::cMessage
{
  protected:
    CODING_RATE codingRate = static_cast<CODING_RATE>(-1);
    int maxSize = 0;
    int usedSize = 0;
    TerminalPacket *packets = nullptr;
    size_t packets_arraysize = 0;

  private:
    void copy(const Block& other);

  protected:
    bool operator==(const Block&) = delete;

  public:
    Block(const char *name=nullptr, short kind=0);
    Block(const Block& other);
    virtual ~Block();
    Block& operator=(const Block& other);
    virtual Block *dup() const override {return new Block(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual CODING_RATE getCodingRate() const;
    virtual void setCodingRate(CODING_RATE codingRate);

    virtual int getMaxSize() const;
    virtual void setMaxSize(int maxSize);

    virtual int getUsedSize() const;
    virtual void setUsedSize(int usedSize);

    virtual void setPacketsArraySize(size_t size);
    virtual size_t getPacketsArraySize() const;
    virtual const TerminalPacket& getPackets(size_t k) const;
    virtual TerminalPacket& getPacketsForUpdate(size_t k) { return const_cast<TerminalPacket&>(const_cast<Block*>(this)->getPackets(k));}
    virtual void setPackets(size_t k, const TerminalPacket& packets);
    virtual void insertPackets(size_t k, const TerminalPacket& packets);
    [[deprecated]] void insertPackets(const TerminalPacket& packets) {appendPackets(packets);}
    virtual void appendPackets(const TerminalPacket& packets);
    virtual void erasePackets(size_t k);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Block& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Block& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline Block *fromAnyPtr(any_ptr ptr) { return check_and_cast<Block*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __BLOCK_M_H

